local monitor = peripheral.find("monitor")
local tape = peripheral.find("tape_drive")
monitor.setTextScale(0.5)
term.redirect(monitor)

local function waitForRedstone()
    print("Waiting for redstone signal to start video...")
    while true do
        for _, side in ipairs(redstone.getSides()) do
            if redstone.getInput(side) then
                return
            end
        end
        os.pullEvent("redstone")
    end
end

local function resetTapeDrive()
    if tape then
        tape.stop()
        tape.seek(-tape.getSize())
    end
end

local function fetchVideoChunk(index)
    local url = "https://raw.githubusercontent.com/robertjojo123/vp/refs/heads/main/video_chunk_" .. index .. ".nfv"
    local response = http.get(url)
    if not response then return nil end

    local data = {}
    for line in response.readLine do
        table.insert(data, line)
    end
    response.close()
    return data
end

local function drawFrame(frameData)
    for y = 1, #frameData do
        local bg = frameData[y]
        local txt = string.rep(" ", #bg)
        local fg = string.rep("0", #bg)
        monitor.setCursorPos(1, y)
        monitor.blit(txt, fg, bg)
    end
end

local function playVideo()
    local chunkIndex = 0
    local totalFrameNum = 0
    local startTime = os.epoch("utc")
    local fps = 10  -- Will be overwritten by chunk data
    local frameDuration = 1000 / fps

    while true do
        local data = fetchVideoChunk(chunkIndex)
        if not data then break end

        local resolution = { tonumber(data[1]:match("(%d+)")), tonumber(data[1]:match("%d+ (%d+)")) }
        fps = tonumber(data[1]:match("%d+ %d+ (%d+)"))
        frameDuration = 1000 / fps
        table.remove(data, 1)

        local frameIndex = 0
        while frameIndex + resolution[2] - 1 <= #data do
            local now = os.epoch("utc")
            local expectedTime = startTime + math.floor(totalFrameNum * frameDuration)
            local waitTime = (expectedTime - now) / 1000

            if waitTime > 0 then os.sleep(waitTime) end

            -- Prepare and draw frame
            local frame = {}
            for i = 1, resolution[2] do
                table.insert(frame, data[frameIndex + i])
            end
            drawFrame(frame)

            frameIndex = frameIndex + resolution[2]
            totalFrameNum = totalFrameNum + 1
        end

        chunkIndex = chunkIndex + 1
    end
end

-- Main Loop
while true do
    term.clear()
    term.setCursorPos(1, 1)
    waitForRedstone()
    resetTapeDrive()

    parallel.waitForAll(
        function()
            if tape then tape.play() end
        end,
        function()
            playVideo()
        end
    )
end
